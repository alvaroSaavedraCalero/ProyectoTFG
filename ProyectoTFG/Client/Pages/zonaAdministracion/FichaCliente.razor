@page "/Administracion/FichaCliente"

@using Microsoft.Extensions.Primitives
@using Microsoft.AspNetCore.WebUtilities

@inject IStorageService storageService
@inject NavigationManager navigate
@inject IRestService restService

<div class="container border border-2 rounded-2 bg-light mb-5 mt-4">
    <EditForm Model="clienteFicha" Context="formContext" class="mx-auto my-auto">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="row text-center">
            <div class="col">
                <h2><b>Información de la cuenta</b></h2>
            </div>
        </div>

        <div class="row text-center">
            <div class="col">
                <img src="@clienteFicha.cuenta.ImagenAvatarBASE64" class="img-thumbnail m-3" alt="ImagenPerfil2" height="150" width="150" />
            </div>
        </div>

        <div class="row">
            <div class="col m-4">
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="usuario" rows="1" placeholder="@clienteFicha.cuenta.Login" @bind-value="@clienteFicha.cuenta.Login"></input>
                    <label for="usuario" class="form-label">Usuario</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nombre" rows="1" placeholder="@clienteFicha.Nombre" @bind-value="@clienteFicha.Nombre"></input>
                    <label for="nombre" class="form-label">Nombre</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="apellidos" rows="1" placeholder="@clienteFicha.Apellidos" @bind-value="@clienteFicha.Apellidos"></input>
                    <label for="apellidos" class="form-label">Apellidos</label>
                </div>
                <div class="row m-md-1">
                    <input type="email" disabled class="form-control" id="email" placeholder="@clienteFicha.cuenta.Email" @bind-value="@clienteFicha.cuenta.Email">
                    <label for="email" class="form-label">Dirección E-Mail</label>
                </div>
            </div>

            <div class="col m-4">
                <div class="row m-md-1">
                    <input class="form-control" type="date" id="fechaNacimiento" rows="1" placeholder="@clienteFicha.FechaNacimiento" @bind-value="@clienteFicha.FechaNacimiento"></input>
                    <label for="fechaNacimiento" class="form-label">Fecha de nacimiento</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nif" rows="1" placeholder="@clienteFicha.NIF" @bind-value="@clienteFicha.NIF"></input>
                    <label for="nif" class="form-label">NIF</label>
                </div>
                <div class="row m-md-1">
                    <select class="form-select" aria-label="Elige genero" id="genero" @bind="@this.clienteFicha.Genero">
                        <option value="0" selected>Elige genero</option>
                        <option value="Hombre">Hombre</option>
                        <option value="Mujer">Mujer</option>
                    </select>
                    <label for="genero" class="form-label">Género</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="telefono" rows="1" placeholder="@clienteFicha.Telefono" @bind-value="@clienteFicha.Telefono"></input>
                    <label for="nif" class="form-label">Telefono</label>
                </div>
            </div>

        </div>

        @if (!String.IsNullOrEmpty(MensajeError))
        {
            <div class="row text-center">
                <label class="mt-3 mb-4 @ClaseMensajeServer">@MensajeError</label>
            </div>
        }

        <div class="row">
            <div class="col text-center">
                <div class="flex justify-between">
                    <button type="submit" class="btn btn-dark m-2 mb-3" @onclick="(() => FormularioInfoCuenta(formContext))">Guardar</button>
                </div>
            </div>
        </div>

    </EditForm>
</div>

@code {
    public Cliente ClienteLogued { get; set; } = new Cliente();

    private String? MensajeError = "";
    private String ClaseMensajeServer = "";
    private Cliente? clienteFicha = new Cliente();

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new Uri(this.navigate.Uri);
        Dictionary<String, StringValues> queryString = QueryHelpers.ParseQuery(uri.Query);
        String idCliente = queryString["idCliente"];

        this.ClienteLogued = this.storageService.RecuperarDatosCliente();
        RestMessage respuesta = await this.restService.ObtenerClienteId(idCliente);
        if (respuesta.Codigo == 0) { this.clienteFicha = respuesta.DatosCliente; } else { MensajeError = "No se ha podido recuperar el cliente solicitado"; }
    }

    public async Task FormularioInfoCuenta(EditContext formContext)
    {

        String jwt = this.storageService.RecuperarJWT();
        RestMessage respuestaREST = await this.restService.ModificarCliente(this.clienteFicha, true, jwt);
        switch (respuestaREST.Codigo)
        {
            case 0:
                this.clienteFicha = respuestaREST.DatosCliente;
                this.clienteFicha.cuenta.Password = "";
                this.ClaseMensajeServer = "text-success";
                this.MensajeError = respuestaREST.Mensaje;
                StateHasChanged();
                break;
            case 5:
                this.navigate.NavigateTo("/Cliente/Login");
                break;
            case 2:
                this.ClaseMensajeServer = "text-danger";
                MensajeError = respuestaREST.Mensaje;
                StateHasChanged();
                break;
            case 1:
                this.ClaseMensajeServer = "text-danger";
                MensajeError = respuestaREST.Mensaje;
                StateHasChanged();
                break;
        }
        
    }

}
