@page "/Cliente/Login"

@inject NavigationManager navigate
@inject IRestService servicioREST
@inject IJSRuntime jsService
@inject IStorageService storageService



<div class="container text-center" onload="window">
    <div class="border border-dark border-1 rounded-4 d-inline-flex" style="background-color: darkgrey">
        <EditForm Model="NuevaCuenta" OnValidSubmit="LoginCliente">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row mt-3 m-2"><h1 id="texto" class="text-black">Acceso del cliente</h1></div>

            <div class="row w-50 mx-auto my-4">
                <ValidationMessage For="@(()=>NuevaCuenta.Email)"></ValidationMessage>
                <input type="email" class="form-control" id="email" @bind-value="@NuevaCuenta.Email">
                <label for="email" class="form-label">Dirección E-Mail</label>
            </div>

            <div class="row w-50 mx-auto my-4">
                <ValidationMessage For="@(()=>NuevaCuenta.Password)"></ValidationMessage>
                <input type="password" class="form-control" id="password" @bind-value="@NuevaCuenta.Password">
                <label for="password" class="form-label">Contraseña</label>
            </div>

            @if (!String.IsNullOrEmpty(MensajeError))
            {
                <div class="row">
                    <label class="text-danger">@MensajeError</label>
                </div>
            }

            <div class="row">
                <div class="col">
                    <button type="submit" @onclick="@LoginCliente" class="btn btn-outline-info mt-5">Continuar</button>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-primary mt-2" @onclick="@LoginGoogle">Login con Google <i class="fa-brands fa-google"></i></button>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col">
                    <button type="button" class="btn btn-dark mt-2" @onclick="@(()=>this.navigate.NavigateTo("/Cliente/Registro"))">Registrarse</button>
                </div>
            </div>

        </EditForm>
    </div>

    <div>
        <canvas id="chart"></canvas>
    </div>

</div>




<!--

 <div class="container text-center">
    <MudPaper Height="400px" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <EditForm Model="@NuevaCuenta" OnValidSubmit="LoginCliente">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <MudPaper Class="pa-4">
                            <MudTextField T="String" Label="Email" Required="true" RequiredError="Email obligatorio." @bind-Value="NuevaCuenta.Email"
                                          Validation="@(() => NuevaCuenta.Email)" />
                            <MudTextField T="string" Label="Password" @bind-Value="NuevaCuenta.Password"
                                          InputType="InputType.Password"
                                          Validation="@(() => NuevaCuenta.Password)" Required="true"
                                          RequiredError="Contraseña obligatoria." />
                        </MudPaper>
                        <MudPaper Class="pa-4 mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => LoginCliente())">Iniciar sesion</MudButton>
                            <MudIconButton Icon="@Icons.Custom.Brands.Google" Color="Color.Primary" aria-label="google" OnClick="@(() => LoginGoogle())"></MudIconButton>
                        </MudPaper>

                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudPaper>
 </div>

-->
@code {
    public Cuenta NuevaCuenta { get; set; } = new Cuenta();
    private String MensajeError = "";

    protected override void OnInitialized()
    {
        NuevaCuenta = this.storageService.RecuperarDatosCliente().cuenta;
    }

    public async Task LoginGoogle()
    {
        String urlGoogle = await this.servicioREST.LoginGoogle();
        await this.jsService.InvokeVoidAsync("window.location.assign", urlGoogle);
    }

    public async Task LoginCliente()
    {
        // hay que mandar el objecto cuanta al servicios REST
        RestMessage respuestaREST = await this.servicioREST.Login(this.NuevaCuenta);

        if (respuestaREST.Codigo == 0)
        {
            await this.jsService.InvokeVoidAsync("console.log", respuestaREST.DatosCliente);
            // antes de redirigir hay que almacenar los datos del cliente y el JWT en el storage del navegador o un subject
            this.storageService.AlmacenarDatosCliente(respuestaREST.DatosCliente);
            this.storageService.AlmacenarJWT(respuestaREST.TokenSesion);
            this.navigate.NavigateTo("/Cliente/PanelCliente");
        }
        else
        {
            MensajeError = respuestaREST.Mensaje;
            StateHasChanged();
        }
    }

}

