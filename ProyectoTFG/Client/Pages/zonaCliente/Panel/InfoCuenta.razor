@using ProyectoTFG.Shared

@inject NavigationManager navigate
@inject IRestService restService
@inject IStorageService storageService
@inject IJSRuntime jsService

<div class="container border border-2 rounded-2 bg-light">
    <EditForm Model="ClienteActual" Context="formContext" class="mx-auto my-auto">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="row m-md-1 text-center "><h1><b>Información de la cuenta</b></h1></div>

        <div class="row">
            <div class="col m-4">
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="usuario" rows="1" placeholder="@ClienteActual.cuenta.Login" @bind-value="@ClienteActual.cuenta.Login"></input>
                    <label for="usuario" class="form-label">Usuario</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nombre" rows="1" placeholder="@ClienteActual.Nombre" @bind-value="@ClienteActual.Nombre"></input>
                    <label for="nombre" class="form-label">Nombre</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="apellidos" rows="1" placeholder="@ClienteActual.Apellidos" @bind-value="@ClienteActual.Apellidos"></input>
                    <label for="apellidos" class="form-label">Apellidos</label>
                </div>
                <div class="row m-md-1">
                    <input type="email" disabled class="form-control" id="email" placeholder="@ClienteActual.cuenta.Email" @bind-value="@ClienteActual.cuenta.Email">
                    <label for="email" class="form-label">Dirección E-Mail</label>
                </div>
            </div>

            <div class="col m-4">
                <div class="row m-md-1">
                    <input class="form-control" type="date" id="fechaNacimiento" rows="1" placeholder="@ClienteActual.FechaNacimiento" @bind-value="@ClienteActual.FechaNacimiento"></input>
                    <label for="fechaNacimiento" class="form-label">Fecha de nacimiento</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nif" rows="1" placeholder="@ClienteActual.NIF" @bind-value="@ClienteActual.NIF"></input>
                    <label for="nif" class="form-label">NIF</label>
                </div>
                <div class="row m-md-1">
                    <select class="form-select" aria-label="Elige genero" id="genero" @bind="@this.ClienteActual.Genero">
                        <option value="0" selected>Elige genero</option>
                        <option value="Hombre">Hombre</option>
                        <option value="Mujer">Mujer</option>
                    </select>
                    <label for="genero" class="form-label">Género</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="telefono" rows="1" placeholder="@ClienteActual.Telefono" @bind-value="@ClienteActual.Telefono"></input>
                    <label for="nif" class="form-label">Telefono</label>
                </div>
            </div>

        </div>

        <p class="text-decoration-none m-4">
            <a class="btn btn-danger" data-bs-toggle="collapse" href="#collapseExample" role="radio" aria-expanded="false" aria-controls="collapseExample">
                Cambiar Contraseña
            </a>
        </p>
        <div class="collapse m-4" id="collapseExample">
            <div class="row m-sm-1">
                <input type="password" id="actualPassword" class="form-control" aria-labelledby="passwordHelpBlock">
                <label for="actualPassword" class="form-label">Contraseña actual</label>
            </div>
            <div class="row m-sm-1">
                <input type="password" id="newPassword" class="form-control" aria-labelledby="passwordHelpBlock" @bind-value="@NuevaPassword">
                <label for="newPassword" class="form-label">Nueva contraseña*</label>
            </div>
            <div class="row m-sm-1">
                <p class="" style="color: purple;">* Para una contraseña segura deberías tener como mínimo 2 tipos de caracteres diferentes (Mayúsculas, Minúsculas, números y caracteres especiales)</p>
            </div>
            <div class="row m-sm-1">
                <input type="password" id="confirmNewPassword" class="form-control" aria-labelledby="passwordHelpBlock">
                <label for="confirmNewPassword" class="form-label">Confirmar contraseña nueva</label>
            </div>
        </div>

        @if (!String.IsNullOrEmpty(MensajeError))
        {
            <div class="row text-center">
                <label class="mt-3 mb-4 @ClaseMensajeServer">@MensajeError</label>
            </div>
        }

        <div class="row">
            <div class="col text-center">
                <div class="flex justify-between">
                    <button type="submit" class="btn btn-dark m-2 mb-3" @onclick="(() => FormularioInfoCuenta(formContext))">Guardar</button>
                </div>
            </div>
        </div>

    </EditForm>
</div>

@code {
    public Cliente ClienteActual { get; set; }

    private String MensajeError = "";
    private String ClaseMensajeServer = "";
    private String NuevaPassword = "";

    protected override void OnInitialized()
    {
        this.ClienteActual = this.storageService.RecuperarDatosCliente();
    }

    public async Task FormularioInfoCuenta(EditContext formContext)
    {
        if (!String.IsNullOrEmpty(NuevaPassword))
        {
            String jwt = this.storageService.RecuperarJWT();

            ClienteActual.cuenta.Password = NuevaPassword;
            RestMessage respuestaREST = await this.restService.ModificarCliente(ClienteActual, true, jwt);

            switch (respuestaREST.Codigo)
            {
                case 0:
                    ClienteActual = respuestaREST.DatosCliente;
                    ClienteActual.cuenta.Password = "";
                    this.storageService.AlmacenarDatosCliente(respuestaREST.DatosCliente);
                    this.ClaseMensajeServer = "text-success";
                    this.MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;

                case 5:
                    this.navigate.NavigateTo("/Cliente/Login");
                    break;

                case 2:
                    this.ClaseMensajeServer = "text-danger";
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;

                case 1:
                    this.ClaseMensajeServer = "text-danger";
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;
            }


        }
        else
        {
            String jwt = this.storageService.RecuperarJWT();

            RestMessage respuestaREST = await this.restService.ModificarCliente(ClienteActual, false, jwt);

            switch (respuestaREST.Codigo)
            {
                case 0:
                    ClienteActual = respuestaREST.DatosCliente;
                    this.storageService.AlmacenarDatosCliente(respuestaREST.DatosCliente);
                    this.ClaseMensajeServer = "text-success";
                    this.MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;

                case 5:
                    this.navigate.NavigateTo("/Cliente/Login");
                    break;

                case 2:
                    this.ClaseMensajeServer = "text-danger";
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;

                case 1:
                    this.ClaseMensajeServer = "text-danger";
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;
            }
        }


    }
}
