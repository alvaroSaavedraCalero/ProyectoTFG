@using ProyectoTFG.Shared

@inject NavigationManager navigate
@inject IRestService restService
@inject IStorageService storageService
@inject IJSRuntime jsService

<div class="container">
    <EditForm Model="ClienteActual" Context="formContext">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="row m-md-1">
            <div class="col">
                <span class="text-danger">@MensajeError</span>
            </div>
        </div>

        <div class="row m-md-1"><h1><b>Información de la cuenta</b></h1></div>

        <div class="row">
            <div class="col">
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="usuario" rows="1" placeholder="@ClienteActual.cuenta.Login" @bind-value="@ClienteActual.cuenta.Login"></input>
                    <label for="usuario" class="form-label">Usuario</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nombre" rows="1" placeholder="@ClienteActual.Nombre" @bind-value="@ClienteActual.Nombre"></input>
                    <label for="nombre" class="form-label">Nombre</label>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="apellidos" rows="1" placeholder="@ClienteActual.Apellidos" @bind-value="@ClienteActual.Apellidos"></input>
                    <label for="apellidos" class="form-label">Apellidos</label>
                </div>
                <div class="row m-md-1">
                    <input type="email" disabled class="form-control" id="email" placeholder="@ClienteActual.cuenta.Email" @bind-value="@ClienteActual.cuenta.Email">
                    <label for="email" class="form-label">Dirección E-Mail</label>
                </div>
            </div>

            <div class="col">
                <div class="row m-md-1 text-muted">Fecha de nacimiento</div>
                <div class="row m-md-1">
                    <div class="col-sm-4">
                        <select name="dia" id="dia" class="form-select" @bind="@this.dia">
                            <option value="0">Elige día</option>
                            @for (int i = 1; i <= 31; i++)
                            {
                                <option value="@i" selected="@(this.ClienteActual.FechaNacimiento.Day==@i)">@i</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-4">
                        <select name="mes" id="mes" class="form-select" @bind="@this.mes">
                            <option value="-1">Elige mes</option>
                            @{
                                int cont = 1;
                                foreach (KeyValuePair<int, String> item in this.meses)
                                {
                                    <option value="@item.Key"
                                            selected=@(this.ClienteActual.FechaNacimiento.Month==cont ? true : false)>@item.Value</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-sm-4">
                        <select name="anio" id="anio" class="form-select" @bind="@this.anio">
                            <option value="-1" selected="">Elige año</option>
                            @for (int anio = 1920; anio <= DateTime.Now.Year; anio++)
                            {
                                <option value="@anio" selected=@(this.ClienteActual.FechaNacimiento.Year==anio ? true : false)>@anio</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="nif" rows="1" placeholder="@ClienteActual.NIF" @bind-value="@ClienteActual.NIF"></input>
                    <label for="nif" class="form-label">NIF</label>
                </div>
                <div class="row m-md-1 text-muted">Genero</div>
                <div class="row m-md-1">
                    <select class="form-select" aria-label="Elige genero" @bind="@this.ClienteActual.Genero">
                        <option value="0" selected>Elige genero</option>

                        <option value="Hombre">Hombre</option>
                        <option value="Mujer">Mujer</option>
                    </select>
                </div>
                <div class="row m-md-1">
                    <input class="form-control" type="text" id="telefono" rows="1" placeholder="@ClienteActual.Telefono" @bind-value="@ClienteActual.Telefono"></input>
                    <label for="nif" class="form-label">Telefono</label>
                </div>
            </div>

        </div>

        <p>
            <a class="form-check-input" data-bs-toggle="collapse" href="#collapseExample" role="radio" aria-expanded="false" aria-controls="collapseExample">
                Cambiar Contraseña
            </a>
        </p>
        <div class="collapse" id="collapseExample">
            <div class="row m-sm-1">
                <input type="password" id="actualPassword" class="form-control" aria-labelledby="passwordHelpBlock">
                <label for="actualPassword" class="form-label">Contraseña actual</label>
            </div>
            <div class="row m-sm-1">
                <input type="password" id="newPassword" class="form-control" aria-labelledby="passwordHelpBlock" @bind-value="@NuevaPassword">
                <label for="newPassword" class="form-label">Nueva contraseña*</label>
            </div>
            <div class="row m-sm-1">
                <p class="text-gray-200">* Para una contraseña segura deberías tener como mínimo 2 tipos de caracteres diferentes (Mayúsculas, Minúsculas, números y caracteres especiales)</p>
            </div>
            <div class="row m-sm-1">
                <input type="password" id="confirmNewPassword" class="form-control" aria-labelledby="passwordHelpBlock">
                <label for="confirmNewPassword" class="form-label">Confirmar contraseña nueva</label>
            </div>
        </div>

        <div class="row">
            <div class="col text-center">
                <div class="flex justify-between">
                    <a class="m-2 text-decoration-nonez" @onclick="@(() =>this.navigate.NavigateTo("/"))">Volver</a>
                    <button type="submit" class="btn btn-outline-secondary m-2" @onclick="(() => FormularioInfoCuenta(formContext))">Guardar</button>
                </div>
            </div>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public Cliente ClienteActual { get; set; }

    private String MensajeError = "";
    private String NuevaPassword = "";
    private int dia;
    private int mes;
    private int anio;
    private Dictionary<int, String> meses = new Dictionary<int, String> { { 1, "Enero" }, { 2, "Febrero" }, { 3, "Marzo" },
    { 4, "Abril" }, { 5, "Mayo" }, { 6, "Junio" }, { 7, "Julio" }, { 8, "Agosto" }, { 9, "Septiembre" }, { 10, "Octubre" },
    { 11, "Noviembre" }, { 12, "Diciembre" } };

    protected override void OnInitialized()
    {
        this.dia = ClienteActual.FechaNacimiento.Day;
        this.mes = ClienteActual.FechaNacimiento.Month;
        this.anio = ClienteActual.FechaNacimiento.Year;

        this.ClienteActual = this.storageService.RecuperarDatosCliente();
    }

    public async Task FormularioInfoCuenta(EditContext formContext)
    {
        if (!String.IsNullOrEmpty(NuevaPassword))
        {
            ClienteActual.FechaNacimiento = new DateTime(anio, mes, dia, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);

            String jwt = this.storageService.RecuperarJWT();

            ClienteActual.cuenta.Password = NuevaPassword;
            RestMessage respuestaREST = await this.restService.ModificarCliente(ClienteActual, true, jwt);

            switch (respuestaREST.Codigo)
            {
                case 0:
                    ClienteActual = respuestaREST.DatosCliente;
                    ClienteActual.cuenta.Password = "";
                    this.storageService.AlmacenarDatosCliente(respuestaREST.DatosCliente);
                    StateHasChanged();
                    break;

                case 5:
                    this.navigate.NavigateTo("/Cliente/Login");
                    break;

                default:
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;
            }


        }
        else
        {
            ClienteActual.FechaNacimiento = new DateTime(anio, mes, dia, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);

            String jwt = this.storageService.RecuperarJWT();

            RestMessage respuestaREST = await this.restService.ModificarCliente(ClienteActual, false, jwt);

            switch (respuestaREST.Codigo)
            {
                case 0:
                    ClienteActual = respuestaREST.DatosCliente;
                    this.storageService.AlmacenarDatosCliente(respuestaREST.DatosCliente);
                    StateHasChanged();
                    break;

                case 5:
                    this.navigate.NavigateTo("/Cliente/Login");
                    break;

                default:
                    MensajeError = respuestaREST.Mensaje;
                    StateHasChanged();
                    break;
            }
        }


    }
}
