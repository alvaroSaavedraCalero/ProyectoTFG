@inject NavigationManager navigate
@inject IStorageService storageService
@inject IRestService servicioRest

<div class="container">

    <div class="row mt-3 mb-3 text-center">
        <div class="col">
            <EditForm Model="@ClienteActual" OnValidSubmit="@SubirImagen">
                @if (String.IsNullOrEmpty(ClienteActual.cuenta.ImagenAvatarBASE64))
                {
                    <img src="images/imagenAvatar.jpg" class="img-thumbnail m-3" alt="ImagenPerfil1" height="200" width="200"/>
                }
                else
                {
                    <img src="@ClienteActual.cuenta.ImagenAvatarBASE64" class="img-thumbnail m-3" alt="ImagenPerfil2" height="200" width="200"/>
                }
                <InputFile OnChange="@CambiarImagen"></InputFile>
                <button type="submit" class="btn btn-dark m-3">Guardar imagen</button>
            </EditForm>
        </div>
        <div class="col">
            <h2 class="text-black">Información de Contacto</h2>
            <span>@ClienteActual.Nombre @ClienteActual.Apellidos /</span>
            <sapn>@ClienteActual.Telefono</sapn>
        </div>
        <div class="col">
            <span>@MensajeError</span>
        </div>
    </div>

    <hr />

    <div class="row mt-3 mb-3 text-center">
        <div class="flex">
            <h2 class="text-black ">Libreta de Direcciones</h2>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6">
            <div class="w-100 h-100">
                <h2 class="text-black"><b>Dirección de pago predeterminada</b></h2>
                @if (!String.IsNullOrEmpty(direcPago.MuniDirecc.DMUN50))
                {
                    <div class="">
                        <span class="d-block">@direcPago.NombreContacto @direcPago.ApellidosContacto</span>
                        @if (!String.IsNullOrEmpty(direcPago.NombreEmpresa))
                        {
                            <span>@direcPago.NombreEmpresa</span>
                        }
                        <span class="d-block">@direcPago.Calle</span>
                        <span class="d-block">@direcPago.Numero</span>
                        <span class="d-block">@direcPago.MuniDirecc.DMUN50</span>
                        <span class="d-block">@direcPago.CP</span>
                        <span class="d-block">@direcPago.Pais</span>
                        <span class="d-block">T: @direcPago.TelefonoContacto</span>
                    </div>
                }
                else
                {
                    <span>No ha establecido una dirección de facturación predeterminada.</span>
                }

            </div>
        </div>
        <div class="col-md-6">
            <div class="w-100 h-100">
                <h2 class="text-black"><b>Dirección de envío predeterminada</b></h2>
                @if (!String.IsNullOrEmpty(direcEnvio.MuniDirecc.DMUN50))
                {
                    <div class="">
                        <span class="d-block">@direcEnvio.NombreContacto @direcEnvio.ApellidosContacto</span>
                        @if (!String.IsNullOrEmpty(direcEnvio.NombreEmpresa))
                        {
                            <span>@direcEnvio.NombreEmpresa</span>
                        }
                        <span class="d-block">@direcEnvio.Calle</span>
                        <span class="d-block">@direcEnvio.Numero</span>
                        <span class="d-block">@direcEnvio.MuniDirecc.DMUN50</span>
                        <span class="d-block">@direcEnvio.CP</span>
                        <span class="d-block">@direcEnvio.Pais</span>
                        <span class="d-block">T: @direcEnvio.TelefonoContacto</span>
                    </div>
                }
                else
                {
                    <span>No ha establecido una dirección de envío predeterminada.</span>
                }
            </div>
        </div>

    </div>
</div>



@code {
    [Parameter]
    public Cliente ClienteActual { get; set; } = new Cliente();

    private Direccion? direcPago = new Direccion();
    private Direccion? direcEnvio = new Direccion();

    private String MensajeError = "";
    private String imagenBASE64 = "";


    protected override void OnInitialized()
    {
        this.ClienteActual = this.storageService.RecuperarDatosCliente();

        if (ClienteActual.MisDirecciones.Count != 0)
        {
            direcPago = ClienteActual.MisDirecciones.FirstOrDefault((Direccion d) => d.EsPrincipal == true) ?? new Direccion();
            direcEnvio = ClienteActual.MisDirecciones.FirstOrDefault((Direccion d) => d.EsFaturacion == true) ?? new Direccion();
        }

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.ClienteActual = this.storageService.RecuperarDatosCliente();
    }

    private async Task CambiarImagen(InputFileChangeEventArgs e)
    {
        try
        {
            IBrowserFile archivo = e.File;
            if (!archivo.Name.Equals("imagenAvatar.jpg"))
            {
                using Stream stream = archivo.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();

                await stream.CopyToAsync(memoryStream);
                this.imagenBASE64 = $"data:{archivo.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            }
        }
        catch (Exception ex)
        {
            MensajeError = "No se ha podido subir la imagen";
        }
    }

    public async Task SubirImagen()
    {
        String jwt = this.storageService.RecuperarJWT();
        RestMessage respuestaServer = await this.servicioRest.ModificarImagenCliente(ClienteActual, this.imagenBASE64, jwt);

        switch(respuestaServer.Codigo)
        {
            case 0:
                ClienteActual.cuenta.ImagenAvatarBASE64 = this.imagenBASE64;
                this.storageService.AlmacenarDatosCliente(ClienteActual);
                this.MensajeError = "Los datos se han establecido correctamente";
                StateHasChanged();
                break;

            case 1:
                MensajeError = respuestaServer.Mensaje;
                StateHasChanged();
                break;

            case 2:
                MensajeError = respuestaServer.Mensaje;
                StateHasChanged();
                break;

            case 5:
                this.navigate.NavigateTo("/Cliente/Login");
                break;
        }
    }

}