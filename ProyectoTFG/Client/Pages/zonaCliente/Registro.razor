@page "/Cliente/Registro"
@using System.Text.RegularExpressions;
@inject NavigationManager navigate
@inject IRestService servicioREST
@inject IStorageService storageService
@inject IJSRuntime jsService



<div class="container">
    <EditForm Model="NuevoCliente" Context="context">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="row m-md-1"><h2>Crear una cuenta cliente</h2></div>
        <div class="row m-md-1"><h4>Información Personal</h4></div>

        <div class="row m-md-1">
            <ValidationMessage For="@(()=>NuevoCliente.Nombre)"></ValidationMessage>
            <input class="form-control" type="text" id="nombre" @bind-value="@NuevoCliente.Nombre"></input>
            <label for="nombre" class="form-label">Nombre</label>
        </div>
        <div class="row m-md-1">
            <ValidationMessage For="@(()=>NuevoCliente.Apellidos)"></ValidationMessage>
            <input class="form-control" type="text" id="apellidos" @bind-value="@NuevoCliente.Apellidos"></input>
            <label for="apellidos" class="form-label">Apellidos</label>
        </div>
        
        <div class="row m-md-1"><h4>Información de registro</h4></div>
        <div class="row m-md-1">
            <ValidationMessage For="@(()=>NuevoCliente.cuenta.Email)"></ValidationMessage>
            <input type="email" class="form-control" id="email" @bind-value="@NuevoCliente.cuenta.Email">
            <label for="email" class="form-label">Dirección E-Mail</label>
        </div>
        <div class="row m-sm-1">
            <p class="text-gray-200">* Para una contraseña segura deberías tener como mínimo 2 tipos de caracteres diferentes (Mayúsculas, Minúsculas, números y caracteres especiales)</p>
        </div>
        <div class="row m-sm-1">
            <ValidationMessage For="@(()=>NuevoCliente.cuenta.Password)"></ValidationMessage>
            <input type="password" id="actualPassword" class="form-control" aria-labelledby="passwordHelpBlock"
                   @bind-value="@NuevoCliente.cuenta.Password">
            <label for="actualPassword" class="form-label">Contraseña</label>
        </div>
        <div class="row m-sm-1">
            <input type="password" id="confirmNewPassword" class="form-control" aria-labelledby="passwordHelpBlock">
            <label for="confirmNewPassword" class="form-label">Confirmar contraseña</label>
        </div>

        <div class="row m-md-1">
            <label class="text-danger">@MensajeError</label>
        </div>

        <div class="row m-sm-1">
            <div class="flex justify-between">
                <button type="submit" class="btn btn-outline-secondary" @onclick="@(() => RegistrarCliente(context))">Crear una cuenta cliente</button>
                <a @onclick="@(() =>this.navigate.NavigateTo("/"))">Volver</a>
            </div>
        </div>
    </EditForm>

</div>



@code {
    public Cliente NuevoCliente { get; set; } = new Cliente();
    public String MensajeError = "";


    public async Task RegistrarCliente(EditContext context)
    {
        Boolean isMatch = Regex.IsMatch(NuevoCliente.cuenta.Password, @"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-_]).{6,50}$");

        if (isMatch)
        {
            RestMessage respuestaServidor = await this.servicioREST.Registro(this.NuevoCliente);

            if (respuestaServidor.Codigo == 0)
            {
                // Debemos mandar a una vista en la cual le decimos al cliente que debe ir a su correo y
                // confirmar el correo intrducido
                this.navigate.NavigateTo("/Cliente/RegistroOK");
            }
            else
            {
                this.MensajeError = respuestaServidor.Mensaje;
                StateHasChanged();
            }
        }
        else
        {
            this.MensajeError = "La contraseña debe tener al menos una MAYS, mins, digito y caracter alfanumerico";
        }
    }

    public async Task Volver()
    {
        this.navigate.NavigateTo("/Cliente/Login");
    }

}
