@page "/Tienda/Cobro"

@layout EmptyLayout
@inject IStorageService storageService
@inject IJSRuntime jsService
@inject IRestService restService
@inject NavigationManager navigate

@using MongoDB.Bson

@if (String.IsNullOrEmpty(ClienteLogueado.Nombre))
{
    this.navigate.NavigateTo("/Cliente/Login");
}
else
{
    <div class="container">
        <div class="row">
            <div class="col text-center mb-3">
                <div class="col"><img src="images/MegaShopLogo.png" width="189" height="189" alt="logo" class="mx-auto my-auto rounded rounded-circle" /></div>
            </div>
            <div class="row">
                <div class="col">
                    <span class="text-danger">@MensajeError</span>
                </div>
            </div>
            <div class="row">
                <!-- Primera columna -->
                <div class="col-7 ">
                    @if (direcEnvio == null)
                    {
                        <div class="text-center d-flex flex-column align-content-between border rounded">
                            <span class="text-danger mt-2">No ha establecido una dirección de envío.</span>
                            <button class="btn btn-dark w-50 mx-auto mb-2" @onclick="@(() => this.navigate.NavigateTo("/Cliente/PanelCliente?dir=1"))">Establecer dirección de envío</button>
                        </div>
                    }
                    else
                    {
                        <!-- direccion de envio -->
                        <div class="border rounded">
                            <div class="row text-center">
                                <div class="flex d-flex justify-content-center">
                                    <h3 class="text-black mt-2"><b>Dirección de Envío</b></h3>
                                </div>
                                <span class="mt-3">@direcEnvio.NombreContacto @direcEnvio.ApellidosContacto</span>
                                <span>@direcEnvio.Calle @direcEnvio.Numero</span>
                                <span>@direcEnvio.CP @direcEnvio.MuniDirecc.DMUN50</span>
                                <span>@ClienteLogueado.cuenta.Email</span>
                                <span>@direcEnvio.TelefonoContacto</span>
                            </div>
                        </div>
                    }
                    <!-- metodos de pago -->
                    <div class="row">
                        <div class="col">
                            <div class="border rounded mt-4">
                                <div class="row text-center mt-2">
                                    <h3 class="text-black"><b>Métodos de pago</b></h3>
                                </div>
                                <div class="row mb-2">
                                    <div class="form-check ms-5">
                                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="pagoTarjeta" @onchange="@(e => {
                                            this.jsService.InvokeVoidAsync("console.log", e);
                                            if (e.Value.ToString().Equals("on")) {
                                                ClasePagoTarjeta = DisplayBlock;
                                                ClasePagoPayPal = DisplayNone;
                                            }
                                        })">
                                        <label class="form-check-label" for="pagoTarjeta">Visa, Mastercard</label>
                                        <i class="fa-brands fa-cc-visa"></i>
                                        <div class="@ClasePagoTarjeta">
                                            <div class="row mb-3">
                                                <div class="col">
                                                    <div class="form-group me-2">
                                                        <label style="font-size: small;">Numero de cuenta</label>
                                                        <input type="numer" class="@ClaseNumeroTarjeta w-75" id="cardNumber" placeholder="1234 1234 1234 1234" @bind-value="NumeroTarjetaCliente">
                                                    </div>
                                                </div>

                                                <div class="col">
                                                    <div class="row">

                                                        <div class="form-group me-2 ms-2 mb-1">
                                                            <label style="font-size: small;">Mes caducidad</label>
                                                            <input type="text" class="form-group w-25" id="expirationMonth" placeholder="Mes Caducidad" @bind-value="Mes">
                                                        </div>


                                                        <div class="form-group me-2 ms-2">
                                                            <label style="font-size: small;">Año caducidad</label>
                                                            <input type="text" class="form-group w-25" id="expirationYear" placeholder="Año Caducidad" @bind-value="Anio">
                                                        </div>

                                                    </div>
                                                </div>

                                                <div class="col">
                                                    <div class="form-group me-2 ms-2">
                                                        <label style="font-size: small;">CVC</label>
                                                        <input type="text" class="form-group w-25" id="cvv" placeholder="CVC" @bind-value="CVC">
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <hr class="w-75 ms-xl-5" />
                                    <div class="form-check ms-5">
                                        <input class="form-check-input" type="radio" name="flexRadioDefault" id="pagoPayPal" @onchange="@(e => {
                                            this.jsService.InvokeVoidAsync("console.log", e);
                                            if (e.Value.ToString().Equals("on")) {
                                                ClasePagoPayPal = DisplayBlock;
                                                ClasePagoTarjeta = DisplayNone;
                                            }
                                        })">
                                        <label class="form-check-label" for="pagoPayPal">PayPal</label>
                                        <i class="fa-brands fa-cc-paypal"></i>
                                    </div>


                                    <div class="@ClasePagoPayPal ms-5">
                                        <i class="fa-solid fa-shield"></i>
                                        <span>Cuando presione el boton se redirigira a la pasarela de pago.</span>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>


                    <!-- Opciones de envio -->
                    <div class="row mt-3">
                        <div class="col">
                            <div class="border rounded mt-4">
                                <div class="form-check ms-5">
                                    <input class="form-check-input mt-3 mb-2" type="radio" name="flexRadioDefault1" id="Envio" checked="checked">
                                    <label class="form-check-label" for="Envio">
                                        <b>DHL estándar</b>    2 €<br />
                                        Tiempo estandar de entrega 5-7 días laborables. Gratis a partir de 100 €.
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>


                    <!-- Boton de compra -->
                    <div class="row mt-3 mb-3">
                        <div class="flex d-flex justify-content-between">
                            <button class="btn btn-outline-dark rounded" @onclick="@(() => this.jsService.InvokeVoidAsync("window.history.back"))">Volver</button>
                            <button class="btn btn-outline-primary rounded" @onclick="@(() => RealizarPedido())"><b>Comprar</b></button>
                        </div>
                    </div>
                </div>

                <!-- Segunda columna -->
                <div class="col-5 bg-secondary bg-gradient">
                    <div class="row text-end mt-2"><a><span>Editar carrito</span></a></div>
                    <div class="row mt-2">
                        <div class="col">
                            @foreach (ItemPedido itemP in ClienteLogueado.PedidoActual.ItemsPedido)
                            {
                                <div class="m-3">
                                    <img src="@itemP.ProductoItem.image" width="75" height="75" />
                                    <h5>@itemP.ProductoItem.title</h5>
                                    <span>@itemP.ProductoItem.price €</span>
                                    <br />
                                    <span>Uds.: @itemP.CatidadItem</span>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="row mt-2">
                        <a class="" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                            Cupón de descuento
                        </a>
                        <div class="collapse" id="collapseExample">
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="floatingInput" placeholder="12345">
                                <label for="floatingInput">Codigo de Descuento</label>
                                <button class="btn btn-outline-dark">Aplicar descuento</button>
                            </div>
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="floatingInput1" placeholder="AB123">
                                <label for="floatingInput1">Cupón de descuento</label>
                                <button class="btn btn-outline-dark">Aplicar</button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="flex d-flex justify-content-between">
                            <span class="ms-5">Subtotal</span>
                            <span class="me-5">@ClienteLogueado.PedidoActual.SubTotal €</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="flex d-flex justify-content-between">
                            <span class="ms-5">Envío</span>
                            <span class="me-5">@ClienteLogueado.PedidoActual.GastosEnvio €</span>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="flex d-flex justify-content-between">
                            <span class="ms-5"><b>Total. IVA incluido.</b></span>
                            <span class="me-5">@ClienteLogueado.PedidoActual.Total €</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Cliente ClienteLogueado = new Cliente();
    private Direccion direcEnvio = new Direccion();
    private Direccion direcFact = new Direccion();
    private DatosPago datosPago = new DatosPago();
    private String MensajeError = "";

    // Para la forma de pago
    private const String DisplayBlock = "d-block";
    private const String DisplayNone = "d-none";
    private const String TextDanger = "text-danger";

    private String ClasePagoTarjeta = DisplayNone;
    private String ClasePagoPayPal = DisplayNone;
    private String ClaseNumeroTarjeta = "form-group";

    // Para el pago con tarjeta
    private String NumeroTarjetaCliente = "";
    private int Mes;
    private int Anio;
    private int CVC;


    protected override void OnInitialized()
    {
        ClienteLogueado = this.storageService.RecuperarDatosCliente();

        direcEnvio = ClienteLogueado.MisDirecciones.Find((Direccion d) => d.EsPrincipal == true);
        if (direcEnvio != null) ClienteLogueado.PedidoActual.DireccionEnvio = direcEnvio;
        direcFact = ClienteLogueado.MisDirecciones.Find((Direccion d) => d.EsFaturacion == true);
        if (direcFact != null) ClienteLogueado.PedidoActual.DireccionFacturacion = direcFact;

    }


    public async Task RealizarPedido()
    {
        // En caso de que el cliente haya elegido el pago con paypal
        if (ClasePagoPayPal.Equals(DisplayBlock))
        {
            ClienteLogueado.PedidoActual.IdPedido = ObjectId.GenerateNewId().ToString();
            DatosPago datosPago = new DatosPago
                {
                    DireccionPrincipal = direcFact,
                    DireccionEnvio = direcEnvio,
                    NombreDestinatario = ClienteLogueado.Nombre,
                    ApellidosDestinatario = ClienteLogueado.Apellidos,
                    TelefonoDestinatario = ClienteLogueado.Telefono,
                    EmailDestinatario = ClienteLogueado.cuenta.Email,
                };

            String jwt = this.storageService.RecuperarJWT();
            this.storageService.AlmacenarDatosCliente(ClienteLogueado);
            String url = await this.restService.RealizarPagoPayPal(ClienteLogueado, datosPago, jwt);
            this.navigate.NavigateTo(url);
        }
        // En caso de que el cliente haya elegido el pago con tarjeta
        else if (ClasePagoTarjeta.Equals(DisplayBlock))
        {
            DatosPago datosPago = new DatosPago
                {
                    DireccionPrincipal = direcFact,
                    DireccionEnvio = direcEnvio,
                    NombreDestinatario = ClienteLogueado.Nombre,
                    ApellidosDestinatario = ClienteLogueado.Apellidos,
                    TelefonoDestinatario = ClienteLogueado.Telefono,
                    EmailDestinatario = ClienteLogueado.cuenta.Email,
                    NumeroTarjeta = NumeroTarjetaCliente,
                    MesCaducidad = Mes,
                    AnioCaducidad = Anio,
                    CVV = CVC
                };

            String jwt = this.storageService.RecuperarJWT();
            RestMessage respuestaServidor = await this.restService.RealizarPagoTarjeta(ClienteLogueado, datosPago, jwt);

            switch (respuestaServidor.Codigo)
            {
                case 0:
                    RestMessage respuestaServer = await this.restService.AlmacenarPedido(ClienteLogueado.PedidoActual, ClienteLogueado, jwt);
                    if (respuestaServer.Codigo == 0)
                    {
                        this.storageService.AlmacenarDatosCliente(respuestaServer.DatosCliente);
                        this.navigate.NavigateTo("/Tienda/PedidoRealizadoOK");
                    }
                    break;

                case 1:
                    this.MensajeError = respuestaServidor.Mensaje;
                    StateHasChanged();
                    break;

                case 2:
                    this.MensajeError = respuestaServidor.Mensaje;
                    StateHasChanged();
                    break;

                case 5:
                    this.navigate.NavigateTo("/Cliente/Login");
                    StateHasChanged();
                    break;

                case 7:
                    // hay que hacer que se vaya a la parte de direcciones y guardar una direccion
                    this.MensajeError = respuestaServidor.Mensaje;
                    StateHasChanged();
                    break;
            }
        }
        // en caso de que no se haya elegido nada, le obligamos al cliente a elegir alguno
        else
        {
            this.MensajeError = "Debe elegir un metodo de pago";
            StateHasChanged();
        }
    }


} 