@inject NavigationManager navigate
@inject IRestService restService
@inject IStorageService storageService



<div class="container border border-2 rounded-2 bg-light">
    <!-- Imagen -->
    <div class="row">
        <div class="col m-1">
            <div class="text-center m-2">
                <a @onclick="@(() => {
                    if (this.ClienteLogued != null) {
                        this.navigate.NavigateTo($"/Tienda/ProductoExpan?idProd={ProductoActual.id}");
                    } else {
                        this.navigate.NavigateTo("/Cliente/Login");
                    }
                })">
                    <img src="@this.ProductoActual.image" width="200" height="200" />
                </a>
            </div>
            <button class="btn " @onclick="@DesearProducto">
                @if (CorazonRojo)
                {
                    <i class="fa-solid fa-heart"></i>
                }
                else
                {
                    <i class="fa-regular fa-heart"></i>
                }
            </button>
        </div>
    </div>

    <hr class="" />

    <!-- Nombre -->
    <div class="row">
        <div class="col">
            <h5><b class="text-black">@ProductoActual.title</b></h5>
        </div>
    </div>

    <!-- Precio -->
    <div class="row">
        <div class="col">
            <h6><b class="text-secondary">@ProductoActual.price €</b></h6>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public ProductoAPI ProductoActual { get; set; } = new ProductoAPI();

    public Cliente ClienteLogued { get; set; } = new Cliente();

    private Boolean CorazonRojo = false;

    protected override void OnInitialized()
    {
        this.ClienteLogued = this.storageService.RecuperarDatosCliente();

        if (!String.IsNullOrEmpty(this.ClienteLogued.cuenta.Email))
        {
            if (ClienteLogued.ListaDeseos.Count != 0)
            {
                ProductoAPI? p = ClienteLogued.ListaDeseos.Find((ProductoAPI p) => p.id == ProductoActual.id);
                if (p != null)
                {
                    CorazonRojo = true;
                }
            }
        }


        
        if (ProductoActual.title.Length > 18)
        {
            ProductoActual.title = ProductoActual.title.Substring(0, 18);
        }
    }


    public async Task DesearProducto()
    {
        String jwt = this.storageService.RecuperarJWT();

        if (CorazonRojo)
        {
            // En caso de que el producto ya este deseado, lo desdeseamos
            RestMessage respuestaREST = await this.restService.DesDesearProd(ClienteLogued, ProductoActual, jwt);

            if (respuestaREST.Codigo == 0)
            {
                ClienteLogued.ListaDeseos.Remove(ProductoActual);
                this.storageService.AlmacenarDatosCliente(ClienteLogued);
                CorazonRojo = false;
                StateHasChanged();
            }
            else if (respuestaREST.Codigo == 5)
            {
                this.navigate.NavigateTo("/Cliente/Login");
            }
        }
        else
        {
            // En caso de que no este deseado, lo deseamos
            RestMessage respuestaREST = await this.restService.DesearProducto(ClienteLogued, ProductoActual, jwt);

            if (respuestaREST.Codigo == 0)
            {
                ClienteLogued.ListaDeseos.Add(ProductoActual);
                this.storageService.AlmacenarDatosCliente(ClienteLogued);
                CorazonRojo = true;
                StateHasChanged();
            }
            else if (respuestaREST.Codigo == 5)
            {
                this.navigate.NavigateTo("/Cliente/Login");
            }
        }
    }
}
